GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('naq_reactor')
         .category('naq_reactor')
         .setEUIO('in')
         .setMaxIOSize(1, 0, 1, 1) // Max Item Inputs, Max Item Outputs, Max Fluid Inputs, Max Fluid Outputs
         .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
         .setSound(GTSoundEntries.TURBINE)
})

GTCEuStartupEvents.registry('gtceu:machine', event => {
  event.create('naq_reactor', 'multiblock')
      .rotationState(RotationState.NON_Y_AXIS)
      .recipeType('naq_reactor')
      .appearanceBlock(GTBlocks.CASING_PTFE_INERT)
      .pattern(definition => FactoryBlockPattern.start()
        .aisle('    CCC    ',  '    CCC    ',   '    CCC    ',    '     C     ',  '     C     ', '    CCC    ', '    CCC    ', '           ')
        .aisle('   CCCCC   ',  '   CCCCC   ',   '   CWCWC   ',    '    WCW    ',  '    WCW    ', '   CWCWC   ', '   CCCCC   ', '    CCC    ')
        .aisle('   CCCCC   ',  '   CCCCC   ',   '   CCCCC   ',    '   CCCCC   ',  '   CCCCC   ', '   CCCCC   ', '   CCCCC   ', '   CCCCC   ')
        .aisle('   CCCCC   ',  '   CCCCC   ',   '   CWCWC   ',    '    WCW    ',  '    WCW    ', '   CWCWC   ', '   CCCCC   ', '    CCC    ')
        .aisle('    CCC    ',  '    CKC    ',   '    CCC    ',    '     C     ',  '     C     ', '    CCC    ', '    CCC    ', '           ')
          .where('K', Predicates.controller(Predicates.blocks(definition.get())))
          .where('W', Predicates.blocks(GTBlocks.COIL_KANTHAL.get()))
          .where('C', Predicates.blocks(GTBlocks.CASING_PTFE_INERT.get())
            .or(Predicates.autoAbilities(definition.getRecipeTypes())
            .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            .or(Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
            .or(Predicates.blocks(PartAbility.OUTPUT_ENERGY))
            .or(Predicates.blocks(PartAbility.EXPORT_ITEMS))
            .or(Predicates.blocks(PartAbility.IMPORT_ITEMS))
            .or(Predicates.blocks(PartAbility.IMPORT_FLUIDS))
          ))
          .build()
     )
     .workableCasingRenderer('gtceu:block/casings/solid/machine_casing_inert_ptfe', 
        'gtceu:block/multiblock/implosion_compressor', false)
})
